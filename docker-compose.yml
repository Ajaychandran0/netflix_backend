version: '3.9'
services:
  # ------------------------
  # Redis
  # ------------------------

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

  # ------------------------
  # Postgres
  # ------------------------
  postgres:
    image: postgres:16.2
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - netflix_pgdata:/var/lib/postgresql/data # Persist data in case of container restart

  # ------------------------
  # User Service
  # ------------------------
  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET:-dev} # 'dev' by default, can switch with 'prod'
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    volumes:
      - ./user-service:/app # For live coding in dev mode
      - /app/node_modules # Ensuring node_modules are properly handled (keep it isolated from host node_modules)
      # docker-compose exec user-service npm install bcrypt (to install bcrypt in the container)

    env_file:
      - ./api-gateway/.env 
   
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # ------------------------
  # API Gateway
  # ------------------------
  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    env_file:
      - ./api-gateway/.env 
    depends_on:
      - redis
      - postgres
      - user-service # Ensure user-service is available before api-gateway starts

volumes:
  netflix_pgdata:
    driver: local # Make sure data is persisted
